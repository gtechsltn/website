<Project>
  <PropertyGroup>
    <CommitBranch Condition=" '$(CommitBranch)' == '' ">$(APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH)</CommitBranch>
    <CommitBranch Condition=" '$(CommitBranch)' == '' ">$(APPVEYOR_REPO_BRANCH)</CommitBranch>
    <CommitBranch Condition=" '$(CommitBranch)' == '' ">$(BUILD_SOURCEBRANCHNAME)</CommitBranch>
    <CommitBranch Condition=" '$(CommitBranch)' == '' ">$(TRAVIS_PULL_REQUEST_BRANCH)</CommitBranch>
    <CommitBranch Condition=" '$(CommitBranch)' == '' ">$(TRAVIS_BRANCH)</CommitBranch>
    <CommitBranch Condition=" '$(CommitBranch)' == '' and '$(GITHUB_REF)' != '' ">$(GITHUB_REF.Substring(11))</CommitBranch>
    <CommitHash Condition=" '$(CommitHash)' == '' ">$(GITHUB_SHA)</CommitHash>
  </PropertyGroup>
  <Target Name="AddGitMetadaAssemblyAttributes"
          BeforeTargets="CoreGenerateAssemblyInfo"
          Condition=" '$(GenerateGitMetadata)' == 'true' ">
    <Exec Command="git rev-parse HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low" IgnoreExitCode="true" Condition=" '$(CommitHash)' == '' ">
      <Output TaskParameter="ConsoleOutput" PropertyName="CommitHash" />
    </Exec>
    <Exec Command="git rev-parse --abbrev-ref HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low" IgnoreExitCode="true" Condition=" '$(CommitBranch)' == '' ">
      <Output TaskParameter="ConsoleOutput" PropertyName="CommitBranch" />
    </Exec>
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
        <_Parameter1>BuildTimestamp</_Parameter1>
        <_Parameter2>$([System.DateTime]::UtcNow.ToString(yyyy-MM-ddTHH:mm:ssK))</_Parameter2>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute" Condition=" $(CommitHash) != '' ">
        <_Parameter1>CommitHash</_Parameter1>
        <_Parameter2>$(CommitHash)</_Parameter2>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute" Condition=" $(CommitBranch) != '' ">
        <_Parameter1>CommitBranch</_Parameter1>
        <_Parameter2>$(CommitBranch)</_Parameter2>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>
  <!--
    Workaround bug in generation of _LocalTopLevelSourceRoot file path.
    See https://github.com/coverlet-coverage/coverlet/pull/863.
  -->
  <Target Name="ReferencedPathMaps" BeforeTargets="CoreCompile" DependsOnTargets="ResolveProjectReferences" >
    <MSBuild Projects="@(AnnotatedProjects->'%(FullPath)')"
             Targets="CoverletGetPathMap"
             Properties="TargetFramework=%(AnnotatedProjects.NearestTargetFramework)"
             SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs"
              ItemName="_LocalTopLevelSourceRoot" />
    </MSBuild>
    <ItemGroup>
      <_byProject Include="@(_LocalTopLevelSourceRoot->'%(MSBuildSourceProjectFile)')" OriginalPath="%(Identity)" />
      <_mapping Include="@(_byProject->'%(Identity)|%(OriginalPath)=%(MappedPath)')" />
    </ItemGroup>
    <PropertyGroup>
      <_sourceRootMappingFilePath>$([System.IO.Path]::Combine('$(OutputPath)', 'CoverletSourceRootsMapping'))</_sourceRootMappingFilePath>
    </PropertyGroup>
    <WriteLinesToFile File="$(_sourceRootMappingFilePath)" Lines="@(_mapping)"
                      Overwrite="true" Encoding="Unicode"
                      Condition="'@(_mapping)'!=''"
                      WriteOnlyWhenDifferent="true" />
    <ItemGroup>
      <FileWrites Include="$(_sourceRootMappingFilePath)" Condition="'@(_mapping)'!=''" />
    </ItemGroup>
  </Target>
  <Target Name="CoverletGetPathMap"
          DependsOnTargets="InitializeSourceRootMappedPaths"
          Returns="@(_LocalTopLevelSourceRoot)"
          Condition="'$(DeterministicSourcePaths)' == 'true'">
    <ItemGroup>
      <_LocalTopLevelSourceRoot Include="@(SourceRoot)" Condition="'%(SourceRoot.NestedRoot)' == ''"/>
    </ItemGroup>
  </Target>
  <!--
    Automatically adds a package reference for Selenium.WebDriver.ChromeDriver.
  -->
  <Target Name="AddReferenceToSeleniumWebDriverChromeDriver"
          BeforeTargets="CollectPackageReferences"
          Condition="@(PackageReference->AnyHaveMetadataValue(`Identity`, `Selenium.WebDriver`))">
    <Message Text="Adding package reference for Selenium.WebDriver.ChromeDriver..." Importance="normal" />
    <!--
      Search for Google Chrome in the well-known installation locations on Windows.
    -->
    <Message Text="Searching for an installation of Google Chrome..." Importance="normal" />
    <ItemGroup Condition="$([MSBuild]::IsOsPlatform(`Windows`))">
      <_ChromeVersions Include="$(ProgramFiles)\Google\Chrome\Application\**\*.manifest"/>
      <_ChromeVersions Include="$(MSBuildProgramFiles32)\Google\Chrome\Application\**\*.manifest"/>
    </ItemGroup>
    <PropertyGroup Condition="$([MSBuild]::IsOsPlatform(`Windows`))">
      <_ChromeVersion>%(_ChromeVersions.Filename)</_ChromeVersion>
    </PropertyGroup>
    <!-- On Linux query the well-known binary for the version -->
    <Exec Condition="$([MSBuild]::IsOsPlatform(`Linux`))"
          ConsoleToMSBuild="true"
          Command="google-chrome --product-version"
          IgnoreExitCode="true"
          StandardOutputImportance="low">
      <Output TaskParameter="ConsoleOutput" PropertyName="_ChromeVersion" />
    </Exec>
    <!-- On macOS query the well-known binary for the version -->
    <Exec Condition="$([MSBuild]::IsOsPlatform(`OSX`))"
          ConsoleToMSBuild="true"
          Command="'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome' --version"
          IgnoreExitCode="true"
          StandardOutputImportance="low">
      <Output TaskParameter="ConsoleOutput" PropertyName="_ChromeVersion" />
    </Exec>
    <!--
      Validate that the installed version of Google Chrome was found.
    -->
    <Error Condition=" '$(_ChromeVersion)' == '' " Text="Google Chrome is not installed." />
    <PropertyGroup>
      <_ChromeVersion>$(_ChromeVersion.Replace(`Google Chrome `, ``))</_ChromeVersion>
      <_ChromeDriverLatestVersionUri>https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$(_ChromeVersion.Split(`.`)[0])</_ChromeDriverLatestVersionUri>
    </PropertyGroup>
    <Message Text="Google Chrome version $(_ChromeVersion) is installed." Importance="normal" />
    <!--
      Download the file containing the latest version of the driver for this major version of Chrome.
      See https://chromedriver.chromium.org/downloads/version-selection.
    -->
    <Message Text="Downloading latest Google Chrome driver version from '$(_ChromeDriverLatestVersionUri)'..." Importance="normal" />
    <DownloadFile SourceUrl="$(_ChromeDriverLatestVersionUri)"
                  DestinationFolder="$(BaseIntermediateOutputPath)"
                  Retries="1">
      <Output TaskParameter="DownloadedFile" PropertyName="_ChromeDriverLatestVersionFile" />
    </DownloadFile>
    <ItemGroup>
      <FileWrites Include="$(_ChromeDriverLatestVersionFile)" />
    </ItemGroup>
    <!--
      Read the latest driver version out of the file.
    -->
    <ReadLinesFromFile File="$(_ChromeDriverLatestVersionFile)" >
      <Output TaskParameter="Lines" PropertyName="_ChromeDriverLatestVersion"/>
    </ReadLinesFromFile>
    <Message Text="The latest version of the Google Chrome driver is $(_ChromeDriverLatestVersion)." Importance="normal" />
    <PropertyGroup>
      <ChromeDriverVersion>$(_ChromeDriverLatestVersion)00</ChromeDriverVersion>
    </PropertyGroup>
    <!--
      Add the appropriate package reference for the driver for the installed version of Chrome.
    -->
    <ItemGroup>
      <PackageVersion Include="Selenium.WebDriver.ChromeDriver" Version="$(ChromeDriverVersion)" />
      <PackageReference Include="Selenium.WebDriver.ChromeDriver" />
    </ItemGroup>
    <Message Text="Added package reference to Selenium.WebDriver.ChromeDriver version '$(ChromeDriverVersion)'." Importance="normal" />
  </Target>
</Project>
